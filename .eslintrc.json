{
    "env": {
        "browser": true,
        "es2021": true,
        "node": true
    },
    "extends": "eslint:recommended",
    "overrides": [
    ],
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "rules": {
        "no-console":"off",
        "linebreak-style": [
            "error",
            "windows"
        ],
        "camelcase": [
            "error",
            {
                "properties": "always",
                "allow": [
                    "legacy_createStore"
                ]
            }
        ], // 用小驼峰命名法来命名你的对象、函数、实例
        "no-else-return": [
            "error",
            {
                "allowElseIf": false
            }
        ], // 注意判断语句和return的执行情况
        "implicit-arrow-linebreak": [
            "error",
            "beside"
        ], // 使箭头函数体有一个清晰的返回
        "default-param-last": [
            "error"
        ], // 默认参数赋值放在最后
        "prefer-object-spread": [
            "error"
        ], // 对象扩展代替assign
        "react/prop-types": "off",
        "react/no-danger": "off", // 在页面中可以使用dangerouslySetInnerHTML属性
        "react/react-in-jsx-scope": [
            "off"
        ], //
        "@typescript-eslint/no-explicit-any": [
            "off"
        ], // typescript允许any类型
        "prefer-const": [
            "error",
            {
                "destructuring": "any",
                "ignoreReadBeforeAssign": false
            }
        ], // 所有的赋值都用 const
        "one-var": [
            "error",
            "never"
        ], // 禁止使用var
        "no-multi-assign": [
            "error"
        ], // 为每个变量声明都用一个 const 或 let
        "operator-linebreak": [
            "error",
            "before",
            {
                "overrides": {
                    "=": "none"
                }
            }
        ], // 不要使用链式声明变量
        "no-new-object": "error", // 不使用对象构造函数
        "object-shorthand": [
            "error",
            "always"
        ], // 对象属性和方法缩写
        "quote-props": [
            "error",
            "as-needed"
        ], // 对象中经量不使用引号
        "no-array-constructor": [
            "error"
        ], // 使用字面量创建数组
        "array-callback-return": [
            "error"
        ], // 数组方法需要返回值
        "prefer-destructuring": [
            "error"
        ], // 结构赋值
        "quotes": [
            "error",
            "single"
        ], // 单引号
        "prefer-template": [
            "error"
        ], // 使用模板字符串
        "template-curly-spacing": [
            "error"
        ], // 禁止模板字符串中的嵌入表达式周围空格的使用
        "no-eval": [
            "error"
        ], // 禁用 eval()
        "no-useless-escape": [
            "error"
        ], // 禁用不必要的转义字符
        "func-style": [
            "error",
            "expression"
        ], // 使用 function 声明或表达式
        "wrap-iife": [
            "error",
            "outside"
        ], // 要求 IIFE（立即执行函数）使用括号括起来
        "no-loop-func": [
            "error"
        ], // ? 禁止在循环语句中出现包含不安全引用的函数声明
        "prefer-rest-params": [
            "error"
        ], // 用收集参数语法 ... 代替arguments，用收集参数语法
        "no-new-func": [
            "error"
        ], // 不要用函数构造器创建函数
        "space-before-blocks": [
            "error",
            "never"
        ], // 定义部分要有空格
        "space-before-function-paren": [
            "error",
            "never"
        ], // 定义部分要有空格
        "no-param-reassign": [
            "error"
        ], // 不要对参数重新赋值
        "prefer-spread": [
            "error"
        ], // 使用拓展运算符调用多参数的函数
        "prefer-arrow-callback": [
            "error"
        ], // 用函数表达式（在回调函数里）的时候，使用箭头函数
        "arrow-spacing": [
            "error"
        ], // 箭头函数箭头两边需要空格
        "arrow-body-style": [
            "error",
            "as-needed"
        ], // 尽可能删除大括号和 return
        "arrow-parens": [
            "error",
            "always"
        ], // 箭头函数参数需要用括号包含
        "no-useless-constructor": [
            "error"
        ], // 尽可能省略类构造器
        "no-dupe-class-members": [
            "error"
        ], // 避免重复定义类成员
        "no-duplicate-imports": [
            "error"
        ], // 一个路径只 import 一次
        "no-restricted-syntax": [
            "error",
            "ForOfStatement",
            "ForInStatement"
        ], // 禁用特定的语法
        "generator-star-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ], // 生成器空格控制
        "dot-notation": [
            "error"
        ], // 访问属性时使用点符号
        "no-case-declarations": [
            "error"
        ], // 在 case 和 default 分句里用大括号创建一块包含词法声明的区域
        "no-nested-ternary": [
            "error"
        ], // 三元表达式不应该嵌套
        "no-unneeded-ternary": [
            "error"
        ], // 避免不必要的三元表达式
        "no-mixed-operators": [
            "error",
            {
                "groups": [
                    [
                        "*",
                        "/",
                        "%",
                        "**"
                    ],
                    [
                        "&",
                        "|",
                        "^",
                        "~",
                        "<<",
                        ">>",
                        ">>>"
                    ],
                    [
                        "==",
                        "!=",
                        "===",
                        "!==",
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    [
                        "&&",
                        "||"
                    ],
                    [
                        "in",
                        "instanceof"
                    ]
                ],
                "allowSamePrecedence": true
            }
        ], // 用圆括号来组合操作符
        "nonblock-statement-body-position": [
            "error"
        ], // 用大括号包裹多行代码块
        "brace-style": [
            "error"
        ], // if 表达式的 else和 if 的右大括号在一行
        "spaced-comment": [
            "error",
            "always"
        ], // 所有注释开头空一格
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1
            }
        ], // 一个缩进使用四个空格
        "keyword-spacing": [
            "error",
            {
                "before": true
            }
        ], // 在控制语句（if, while 等）的圆括号前空一格
        "space-infix-ops": [
            "error"
        ], // 用空格来隔开运算符
        "eol-last": [
            "error",
            "always"
        ], // 文件结尾空一行
        "newline-per-chained-call": [
            "error",
            {
                "ignoreChainWithDepth": 2
            }
        ], // 当出现长的方法链式调用时（>2个）用缩进
        "no-whitespace-before-property": [
            "error"
        ], // 用点开头强调该行是一个方法调用，而不是一个新的语句
        "padded-blocks": [
            "error",
            "never"
        ], //  不要用空白行填充块
        "no-multiple-empty-lines": [
            "error",
            {
                "max": 1
            }
        ], // 不要在代码之间使用多个空白行填充
        "space-in-parens": [
            "error",
            "never"
        ], // 圆括号里不要加空格
        "array-bracket-spacing": [
            "error",
            "never"
        ], // 方括号里不要加空格
        "object-curly-spacing": [
            "error",
            "always"
        ], // 花括号里加空格
        "max-len": [
            "error",
            {
                "code": 120,
                "tabWidth": 2,
                "ignoreUrls": true,
                "ignoreStrings": true,
                "ignoreTemplateLiterals": true
            }
        ], // 避免一行代码超过100个字符（包含空格）
        "block-spacing": [
            "error",
            "always"
        ], // { 后和 } 前都需要空格
        "comma-spacing": [
            "error",
            {
                "before": false,
                "after": true
            }
        ], // , 前不要空格， , 后需要空格
        "func-call-spacing": [
            "error",
            "never"
        ], // 调用函数时，函数名和小括号之间不要空格
        "key-spacing": [
            "error"
        ], // 在对象的字面量属性中， key 和 value 之间要有空格
        "computed-property-spacing": [
            "error",
            "never"
        ], // 计算属性内禁止空格
        "no-trailing-spaces": [
            "error"
        ], // 行末不要空格
        "comma-style": [
            "error"
        ], // 不要前置逗号
        "comma-dangle": [
            "error",
            "always-multiline"
        ], // 额外结尾逗号
        "semi": [
            "error",
            "always"
        ], // 要分号
        "no-new-wrappers": [
            "error"
        ], // 字符串转换用String
        "radix": [
            "error",
            "always"
        ], // 用 Number 做类型转换，parseInt 转换 string 应总是带上基数
        "id-length": [
            "error",
            {
                "min": 2
            }
        ], // 命名长度
        // "new-cap": [
        //     "error"
        // ], // 用大驼峰命名法来命名类
        "no-underscore-dangle": [
            "error"
        ] // 不要用前置或后置下划线
    }
}